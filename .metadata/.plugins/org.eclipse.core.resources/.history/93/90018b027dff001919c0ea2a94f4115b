package trie;

import java.util.ArrayList;

/**
 * This class implements a Trie. 
 * 
 * @author Sesh Venugopal
 *
 */
public class Trie {
	
	// prevent instantiation
	private Trie() { }
	
	/**
	 * Builds a trie by inserting all words in the input array, one at a time,
	 * in sequence FROM FIRST TO LAST. (The sequence is IMPORTANT!)
	 * The words in the input array are all lower case.
	 * 
	 * @param allWords Input array of words (lowercase) to be inserted.
	 * @return Root of trie with all words inserted from the input array
	 */
	public static TrieNode buildTrie(String[] allWords) {
		
		TrieNode root = new TrieNode(null, null, null);
		
		for (int i = 0; i < allWords.length; i++) {
			TrieNode ptr = root;
			TrieNode ptr2 = ptr;
			String currentWord = allWords[i];
			short startIndex = 0;
			short endIndex = (short) ((short) (currentWord.length()) - 1);
			Indexes index = new Indexes(i, startIndex, endIndex);
			if(ptr.firstChild == null) {
				ptr.firstChild = new TrieNode(index, null, null);
				continue;
			}
			else {
				ptr = ptr.firstChild;
			}
			while(ptr.firstChild != null) {
				ptr2 = ptr;
				while(ptr2.sibling != null) {
					while(allWords[ptr2.substr.wordIndex].charAt(startIndex) == currentWord.charAt(startIndex)) {
						startIndex++;
					}
					ptr2 = ptr2.sibling;			
				}
				ptr = ptr.firstChild;
			}
			
			//last level
			ptr2 = ptr;
			while(ptr2 != null) {
				System.out.println(allWords[ptr2.substr.wordIndex].charAt(startIndex));
				System.out.println(currentWord.charAt(startIndex));
				while(allWords[ptr2.substr.wordIndex].charAt(startIndex) == currentWord.charAt(startIndex)) {
					startIndex++;
				}
				ptr2 = ptr2.sibling;
			}								
			
			if(startIndex == 0) {
				if(ptr.firstChild == null) {		
					while(ptr.sibling != null) {
						ptr = ptr.sibling;
					}
					ptr.sibling = new TrieNode(index, null, null);				
				}
			}
			else {
				if(ptr.firstChild != null) {		
					while(ptr.sibling != null) {
						ptr = ptr.sibling;
					}
					ptr.sibling = new TrieNode(index, null, null);
				
				}
				else {
					ptr.substr.endIndex -= startIndex;
					Indexes firstIndex = new Indexes(i, startIndex, ptr.substr.endIndex);
					firstIndex.wordIndex = ptr.substr.wordIndex;
					Indexes nextIndex = new Indexes(i, startIndex, endIndex);
					ptr.firstChild = new TrieNode(firstIndex, null, new TrieNode(nextIndex, null, null));
				}
			}
			
			
			
			
			
			
			
			
			/*if(originalRoot.firstChild == null) {
				Indexes wordSub = new Indexes(i, startIndex, endIndex);
				root.firstChild = new TrieNode(wordSub, null, null);
			}
			else if(root.firstChild == null) {
				while((allWords[root.firstChild.substr.wordIndex]).charAt(startIndex) == currentWord.charAt(startIndex)) {
					startIndex++;
				}
				Indexes wordSub = new Indexes(i, startIndex, endIndex);
				if(startIndex == 0) {
					originalRoot.firstChild.sibling = new TrieNode(wordSub, null, null);
				}
				else {
					root.firstChild = addSubTrie(root, startIndex, endIndex, i);
				}
				root = root.firstChild;
			}*/
			
			
		}
		
		// FOLLOWING LINE IS A PLACEHOLDER TO ENSURE COMPILATION
		// MODIFY IT AS NEEDED FOR YOUR IMPLEMENTATION
		return null;
	}
	
	private static TrieNode addSubTrie(TrieNode root, short startIndex, short newEndIndex, int wordIndex) {
		
		Indexes oldWordSub = root.substr;
		oldWordSub.startIndex = startIndex;
		Indexes newWordSub = new Indexes(wordIndex, startIndex, newEndIndex);
		root.firstChild = new TrieNode(oldWordSub, null, new TrieNode(newWordSub, null, null));	
		
		return root;
	}
	
	/**
	 * Given a trie, returns the "completion list" for a prefix, i.e. all the leaf nodes in the 
	 * trie whose words start with this prefix. 
	 * For instance, if the trie had the words "bear", "bull", "stock", and "bell",
	 * the completion list for prefix "b" would be the leaf nodes that hold "bear", "bull", and "bell"; 
	 * for prefix "be", the completion would be the leaf nodes that hold "bear" and "bell", 
	 * and for prefix "bell", completion would be the leaf node that holds "bell". 
	 * (The last example shows that an input prefix can be an entire word.) 
	 * The order of returned leaf nodes DOES NOT MATTER. So, for prefix "be",
	 * the returned list of leaf nodes can be either hold [bear,bell] or [bell,bear].
	 *
	 * @param root Root of Trie that stores all words to search on for completion lists
	 * @param allWords Array of words that have been inserted into the trie
	 * @param prefix Prefix to be completed with words in trie
	 * @return List of all leaf nodes in trie that hold words that start with the prefix, 
	 * 			order of leaf nodes does not matter.
	 *         If there is no word in the tree that has this prefix, null is returned.
	 */
	public static ArrayList<TrieNode> completionList(TrieNode root,
										String[] allWords, String prefix) {
		/** COMPLETE THIS METHOD **/
		
		// FOLLOWING LINE IS A PLACEHOLDER TO ENSURE COMPILATION
		// MODIFY IT AS NEEDED FOR YOUR IMPLEMENTATION
		return null;
	}
	
	public static void print(TrieNode root, String[] allWords) {
		System.out.println("\nTRIE\n");
		print(root, 1, allWords);
	}
	
	private static void print(TrieNode root, int indent, String[] words) {
		if (root == null) {
			return;
		}
		for (int i=0; i < indent-1; i++) {
			System.out.print("    ");
		}
		
		if (root.substr != null) {
			String pre = words[root.substr.wordIndex]
							.substring(0, root.substr.endIndex+1);
			System.out.println("      " + pre);
		}
		
		for (int i=0; i < indent-1; i++) {
			System.out.print("    ");
		}
		System.out.print(" ---");
		if (root.substr == null) {
			System.out.println("root");
		} else {
			System.out.println(root.substr);
		}
		
		for (TrieNode ptr=root.firstChild; ptr != null; ptr=ptr.sibling) {
			for (int i=0; i < indent-1; i++) {
				System.out.print("    ");
			}
			System.out.println("     |");
			print(ptr, indent+1, words);
		}
	}
 }
